// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  googleId  String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  ownPools  Pool[]
  players   Player[]
}

enum TypePool {
  normal
  custom
}

enum TypeScore {
  oneZero
}

model Pool {
  id           String    @id @default(uuid())
  name         String
  code         String    @unique
  createdAt    DateTime  @default(now())
  startTime    DateTime
  endTime      DateTime
  ownerId      String
  owner        User      @relation(fields: [ownerId], references: [id], onDelete: NoAction)
  mode         TypePool  @default(normal)
  scoring      TypeScore @default(oneZero)
  gamesClosed  Int       @default(0)
  nGames       Int // máximo 16
  games        Int[]
  leagueId     Int?
  poolFinished Boolean   @default(false) // bolão finalizado
  winners      String[]  @default([])
  drawn        String[]  @default([])
  losers       String[]  @default([])
  players      Player[]
}

model Player {
  id      String  @id @default(uuid())
  points  Int     @default(0)
  userId  String
  poolId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: NoAction)
  pool    Pool    @relation(fields: [poolId], references: [id], onDelete: Cascade)
  guesses Guess[]

  @@unique([userId, poolId])
}

model Guess {
  id        String   @id @default(uuid())
  homeScore Int
  awayScore Int
  points    Int      @default(0)
  isVisible Boolean  @default(false)
  createdAt DateTime @default(now())
  gameId    Int
  gameFull  Boolean  @default(false)
  playerId  String
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([gameId, playerId])
}
